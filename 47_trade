#47都道府県間の地域間移出入量を求める

A_prev=ones(Float64, 1, 47)
B_prev=ones(Float64, 1, 47)


number=47
crs0=[10000	498	625	753	694	785	807	932	920	986	993	1013	1005	1027	925	1098	1134	1195	1081	1068	1253	1134	1249	1296	1307	1336	1358	1382	1352	1413	1440	1500	1500	1560	1680	1440	1500	1620	1560	1740	1800	1860	1860	1800	1920	1980	3480
498	10000	147	265	173	294	316	441	424	488	505	535	516	533	408	580	614	678	591	552	728	645	737	791	788	805	828	851	827	881	925	1007	956	1063	1149	932	969	1072	1049	1266	1306	1356	1335	1289	1412	1440	3000
625	147	10000	147	141	175	198	321	304	376	391	428	405	441	321	494	526	590	479	463	643	532	629	685	702	718	741	764	740	793	838	919	867	972	1061	844	880	981	956	1176	1221	1267	1249	1210	1332	1369	2940
753	265	147	10000	195	57	77	208	182	244	256	297	276	315	200	374	409	477	352	344	531	417	516	569	595	605	625	649	625	677	721	802	752	856	943	728	765	861	840	1053	1098	1147	1121	1075	1210	1241	2820
694	173	141	195	10000	183	246	372	352	407	440	466	454	486	259	432	466	529	507	400	577	570	587	645	639	658	679	703	678	732	776	858	806	911	999	780	817	915	891	1110	1149	1200	1176	1125	1259	1299	2880
785	294	175	57	183	10000	77	220	186	248	265	309	283	332	183	358	391	456	364	325	500	422	511	570	565	584	604	628	604	657	701	781	731	835	923	707	746	843	821	1036	1077	1125	1101	1053	1186	1222	2760
807	316	198	77	246	77	10000	164	126	189	202	245	219	264	145	321	354	421	299	289	474	362	460	514	529	549	568	592	569	621	665	746	695	799	888	672	710	805	784	998	1042	1090	1065	1020	1154	1185	2760
932	441	321	208	372	220	164	10000	76	125	108	117	120	145	238	355	388	452	231	226	415	281	395	435	460	480	499	524	490	551	634	698	644	748	838	603	641	736	715	946	989	1043	1016	945	1080	1137	2700
920	424	304	182	352	186	126	76	10000	95	106	148	122	165	203	326	359	422	202	198	383	261	370	420	443	463	483	507	477	537	616	681	626	730	822	586	624	719	699	928	971	1020	994	926	1062	1116	2700
986	488	376	244	407	248	189	125	95	10000	94	150	107	147	159	259	291	356	157	128	320	217	301	365	379	401	419	444	419	472	555	619	565	669	759	523	561	656	635	866	908	965	934	861	995	1055	2640
993	505	391	256	440	265	202	108	106	94	10000	78	39	79	239	315	348	411	142	192	340	194	308	349	373	394	412	440	407	468	551	616	561	666	756	520	558	654	632	863	906	959	932	867	1003	1052	2640
1013	535	428	297	466	309	245	117	148	150	78	10000	84	77	301	380	411	465	193	257	371	231	331	371	394	413	444	457	438	498	578	643	586	691	783	548	587	682	660	890	932	980	954	894	1028	1074	2640
1005	516	405	276	454	283	219	120	122	107	39	84	10000	53	260	337	368	396	108	217	305	165	278	316	342	363	382	405	374	435	518	582	527	632	719	483	523	651	595	827	870	924	896	828	963	1013	2580
1027	533	441	315	486	332	264	145	165	147	79	77	53	10000	309	376	409	382	144	255	291	146	259	300	324	345	364	388	355	416	499	563	509	613	703	468	506	601	579	810	853	907	879	810	945	999	2580
925	408	321	200	259	183	145	238	203	159	239	301	260	309	10000	192	224	288	267	159	334	330	344	403	398	417	437	461	437	490	534	617	565	670	758	541	579	677	653	871	909	960	936	887	1020	1058	2640
1098	580	494	374	432	358	321	355	326	259	315	380	337	376	192	10000	59	128	263	162	180	302	196	257	237	260	277	301	278	331	375	454	410	508	595	381	418	515	492	705	746	804	774	721	855	897	2440
1134	614	526	409	466	391	354	388	359	291	348	411	368	409	224	59	10000	75	285	192	167	288	183	225	190	215	232	255	231	285	325	401	356	457	543	333	371	467	446	653	693	751	722	674	808	847	2400
1195	678	590	477	529	456	421	452	422	356	411	465	396	382	288	128	75	10000	310	256	129	260	137	177	147	170	193	214	190	249	275	352	306	406	493	292	329	427	403	603	644	702	672	632	766	796	2340
1081	591	479	352	507	364	299	231	202	157	142	193	108	144	267	263	285	310	10000	149	224	104	208	256	280	300	320	344	312	375	454	518	463	568	659	423	461	555	535	766	811	860	834	770	906	959	2520
1068	552	463	344	400	325	289	226	198	128	192	257	217	255	159	162	192	256	149	10000	242	215	228	288	305	324	345	368	344	398	479	544	487	592	685	449	487	581	562	790	830	879	855	793	927	977	2520
1253	728	643	531	577	500	474	415	383	320	340	371	305	291	334	180	167	129	224	242	10000	181	67	101	110	136	157	177	155	217	292	353	311	409	494	255	292	393	370	603	645	700	670	599	735	796	2340
1134	645	532	417	570	422	362	281	261	217	194	231	165	146	330	302	288	260	104	215	181	10000	147	188	213	234	252	277	244	305	388	452	397	501	591	355	393	488	466	698	740	797	767	694	827	888	2460
1249	737	629	516	587	511	460	395	370	301	308	331	278	259	344	196	183	137	208	228	67	147	10000	76	102	128	147	169	133	194	279	343	299	399	483	247	284	382	361	594	635	692	663	594	723	788	2340
1296	791	685	569	645	570	514	435	420	365	349	371	316	300	403	257	225	177	256	288	101	188	76	10000	85	106	123	148	96	156	258	321	276	380	462	227	263	362	342	576	617	673	645	567	701	770	2340
1307	788	702	595	639	565	529	460	443	379	373	394	342	324	398	237	190	147	280	305	110	213	102	85	10000	42	80	84	74	133	190	252	204	303	395	156	192	291	268	500	541	599	569	496	631	692	2280
1336	805	718	605	658	584	549	480	463	401	394	413	363	345	417	260	215	170	300	324	136	234	128	106	42	10000	90	97	79	137	203	268	221	322	409	173	210	307	287	522	563	620	590	510	645	714	2280
1358	828	741	625	679	604	568	499	483	419	412	444	382	364	437	277	232	193	320	345	157	252	147	123	80	90	10000	50	45	83	175	237	186	285	378	132	167	267	245	481	530	581	550	470	605	675	2220
1382	851	764	649	703	628	592	524	507	444	440	457	405	388	461	301	255	214	344	368	177	277	169	148	84	97	50	10000	102	120	159	221	162	261	352	96	132	231	211	457	499	557	526	436	571	652	2220
1352	827	740	625	678	604	569	490	477	419	407	438	374	355	437	278	231	190	312	344	155	244	133	96	74	79	45	102	10000	104	200	263	220	320	404	168	204	302	279	516	554	612	582	512	642	707	2280
1413	881	793	677	732	657	621	551	537	472	468	498	435	416	490	331	285	249	375	398	217	305	194	156	133	137	83	120	104	10000	233	295	253	352	442	170	232	317	294	551	591	649	619	522	657	743	2280
1440	925	838	721	776	701	665	634	616	555	551	578	518	499	534	375	325	275	454	479	292	388	279	258	190	203	175	159	200	233	10000	123	160	254	330	215	211	287	268	440	481	540	509	479	628	633	2220
1500	1007	919	802	858	781	746	698	681	619	616	643	582	563	617	454	401	352	518	544	353	452	343	321	252	268	237	221	263	295	123	10000	160	157	231	238	195	241	252	342	382	438	412	382	533	539	2100
1500	956	867	752	806	731	695	644	626	565	561	586	527	509	565	410	356	306	463	487	311	397	299	276	204	221	186	162	220	253	160	160	10000	141	235	132	81	166	152	341	381	437	411	371	505	537	2100
1560	1063	972	856	911	835	799	748	730	669	666	691	632	613	670	508	457	406	568	592	409	501	399	380	303	322	285	261	320	352	254	157	141	10000	116	216	173	191	234	219	260	312	287	260	413	411	1980
1680	1149	1061	943	999	923	888	838	822	759	756	783	719	703	758	595	543	493	659	685	494	591	483	462	395	409	378	352	404	442	330	231	235	116	10000	302	258	246	315	129	172	221	199	171	319	319	1860
1440	932	844	728	780	707	672	603	586	523	520	548	483	468	541	381	333	292	423	449	255	355	247	227	156	173	132	96	168	170	215	238	132	216	302	10000	71	160	139	407	450	507	477	365	499	602	2160
1500	969	880	765	817	746	710	641	624	561	558	587	523	506	579	418	371	329	461	487	292	393	284	263	192	210	167	132	204	232	211	195	81	173	258	71	10000	128	113	362	404	461	433	336	470	559	2100
1620	1072	981	861	915	843	805	736	719	656	654	682	651	601	677	515	467	427	555	581	393	488	382	362	291	307	267	231	302	317	287	241	166	191	246	160	128	10000	129	353	365	422	376	252	385	492	2040
1560	1049	956	840	891	821	784	715	699	635	632	660	595	579	653	492	446	403	535	562	370	466	361	342	268	287	245	211	279	294	268	252	152	234	315	139	113	129	10000	418	457	515	458	334	468	577	2160
1740	1266	1176	1053	1110	1036	998	946	928	866	863	890	827	810	871	705	653	603	766	790	603	698	594	576	500	522	481	457	516	551	440	342	341	219	129	407	362	353	418	10000	67	123	102	133	219	220	1800
1800	1306	1221	1098	1149	1077	1042	989	971	908	906	932	870	853	909	746	693	644	811	830	645	740	635	617	541	563	530	499	554	591	481	382	381	260	172	450	404	365	457	67	10000	98	89	142	210	211	1800
1860	1356	1267	1147	1200	1125	1090	1043	1020	965	959	980	924	907	960	804	751	702	860	879	700	797	692	673	599	620	581	557	612	649	540	438	437	312	221	507	461	422	515	123	98	10000	158	189	281	278	1860
1860	1335	1249	1121	1176	1101	1065	1016	994	934	932	954	896	879	936	774	722	672	834	855	670	767	663	645	569	590	550	526	582	619	509	412	411	287	199	477	433	376	458	102	89	158	10000	162	146	145	1780
1800	1289	1210	1075	1125	1053	1020	945	926	861	867	894	828	810	887	721	674	632	770	793	599	694	594	567	496	510	470	436	512	522	479	382	371	260	171	365	336	252	334	133	142	189	162	10000	176	282	1860
1920	1412	1332	1210	1259	1186	1154	1080	1062	995	1003	1028	963	945	1020	855	808	766	906	927	735	827	723	701	631	645	605	571	642	657	628	533	505	413	319	499	470	385	468	219	210	281	146	176	10000	127	1680
1980	1440	1369	1241	1299	1222	1185	1137	1116	1055	1052	1074	1013	999	1058	897	847	796	959	977	796	888	788	770	692	714	675	652	707	743	633	539	537	411	319	602	559	492	577	220	211	278	145	282	127	10000	1560
3480	3000	2940	2820	2880	2760	2760	2700	2700	2640	2640	2640	2580	2580	2640	2440	2400	2340	2480	2480	2340	2440	2340	2340	2280	2280	2220	2220	2280	2280	2220	2100	2100	1980	1860	2160	2100	2040	2160	1800	1800	1860	1780	1860	1680	1560	10000]
# Orig=[30,20,100]
# Dest=[60,40,50]
Orig=[6979080	2490816	2539213	5226228	1839669	2672054	5556246	12408019	8852002	7526749	13750478	15171033	74358876	24276227	5288113	3567430	3396091	1957763	2870213	5767070	4972024	14259634	30571211	9767513	5936784	6821193	24378437	15088418	1824096	2671262	770575	1301582	7192137	8783876	6391438	1782393	2825373	3959649	742988	4291355	1662176	2198844	2586823	4778742	1815050	2568224	1103687]
Dest=[9270699	3125737	3499834	6637705	2587694	3266928	6794370	12334093	8645727	7576362	18588256	18901507	46703711	28863656	5805216	3293986	3559034	2478754	3133393	6350794	4959326	13239068	28835872	9624991	5816341	7029859	23931979	16598453	2779470	2940290	1153197	1812123	6681347	7770676	6185703	2213575	2936978	4654091	1357741	4060673	1903704	2726437	3715503	5059148	2355797	3512448	2266609]



function cal_B(A,O,crs1,number)  #バランシングファクターBを求める
    B0=zeros(number)
    for j in 1:number
        for i in 1:number
             B0[j] +=A[i]*O[i]*exp(-0.1*crs1[i,j]) #関数外の数値を更新
        end
        B0[j]=inv(B0[j])
    end
return B0
end

#全ての出発地のバランシングファクターAを求める
function cal_A(B,D,crs1,number)
    A0=zeros(number)
    for j in 1:number
        for i in 1:number
             A0[j]+=B[i]D[i]*exp(-0.1*crs1[j,i])
        end
        A0[j]=inv(A0[j])
    end
return A0
end

cal_B(A_prev,Orig,crs0,number)
cal_A(B_prev,Dest,crs0,number)
function Balancing_method(A_prev,B_prev,C_rs,Orig,Dest,number)
    epsilon = 1e-3
    while true
        B_next=cal_B(A_prev,Orig,C_rs,number)
        println("B",B_next)
        A_next=cal_A(B_next,Dest,C_rs,number)
        println("A",A_next)
        sum_gap=0
        for i in 1:number
            sum_gap+=abs(A_next[i]-A_prev[i])/A_prev[i]+abs(B_next[i]-B_prev[i])/B_prev[i]
        end
        if sum_gap < epsilon
            println("バランシングファクターA=",A_next)
            println("バランシングファクターB=",B_next)
            return A_next,B_next
            break
        end
        B_prev=B_next
        A_prev=A_next
    end
end

A,B=Balancing_method(A_prev,B_prev,crs0,Orig,Dest,number)
#得られたバランシングファクターを基に地域間の移出入額を求める

function trade_value(A,B,O,D,crs,number)
    V_rs0=zeros(number,number)
    for j in 1:number
        for i in 1:number
            V_rs0[j,i]=A[j]*B[i]*O[j]*D[i]exp(-0.1*crs[j,i])
            # if j==i
            #     V_rs0[j,i]=0
            # end
        end
    end
    return V_rs0
end
function main_trade_value(A_prev,B_prev,C_rs,Orig,Dest,number)
    A,B=Balancing_method(A_prev,B_prev,C_rs,Orig,Dest,number)
    V_rs=trade_value(A,B,Orig,Dest,C_rs,number)
    return V_rs
end

main_trade_value(A_prev,B_prev,crs0,Orig,Dest,number)

using DataFrames

println("地域間の移出入額")
data=main_trade_value(A_prev,B_prev,crs0,Orig,Dest,number)
# df = DataFrame(a = data1[:,1],b=data[:,2],c=data[:,3])
#
df=DataFrame(A=data[1:20,1], B=data[1:20,2], C=data[1:20,3], D=data[1:20,4], E=data[1:20,5], F=data[1:20,6], G=data[1:20,7], H=data[1:20,8], I=data[1:20,9], J=data[1:20,10], K=data[1:20,11], L=data[1:20,12], M=data[1:20,13], N=data[1:20,14], O=data[1:20,15], P=data[1:20,16], Q=data[1:20,17], R=data[1:20,18], S=data[1:20,19], T=data[1:20,20], U=data[1:20,21], V=data[1:20,22], W=data[1:20,23], X=data[1:20,24], Y=data[1:20,25], Z=data[1:20,26], AA=data[1:20,27], AB=data[1:20,28], AC=data[1:20,29], AD=data[1:20,30], AE=data[1:20,31], AF=data[1:20,32], AG=data[1:20,33], AH=data[1:20,34], AI=data[1:20,35], AJ=data[1:20,36], AK=data[1:20,37], AL=data[1:20,38], AM=data[1:20,39], AN=data[1:20,40], AO=data[1:20,41], AP=data[1:20,42], AQ=data[1:20,43], AR=data[1:20,44], AS=data[1:20,45], AT=data[1:20,46], AU=data[1:20,47])
df1=DataFrame(A=data[21:40,1], B=data[21:40,2], C=data[21:40,3], D=data[21:40,4], E=data[21:40,5], F=data[21:40,6], G=data[21:40,7], H=data[21:40,8], I=data[21:40,9], J=data[21:40,10], K=data[21:40,11], L=data[21:40,12], M=data[21:40,13], N=data[21:40,14], O=data[21:40,15], P=data[21:40,16], Q=data[21:40,17], R=data[21:40,18], S=data[21:40,19], T=data[21:40,20], U=data[21:40,21], V=data[21:40,22], W=data[21:40,23], X=data[21:40,24], Y=data[21:40,25], Z=data[21:40,26], AA=data[21:40,27], AB=data[21:40,28], AC=data[21:40,29], AD=data[21:40,30], AE=data[21:40,31], AF=data[21:40,32], AG=data[21:40,33], AH=data[21:40,34], AI=data[21:40,35], AJ=data[21:40,36], AK=data[21:40,37], AL=data[21:40,38], AM=data[21:40,39], AN=data[21:40,40], AO=data[21:40,41], AP=data[21:40,42], AQ=data[21:40,43], AR=data[21:40,44], AS=data[21:40,45], AT=data[21:40,46], AU=data[21:40,47])

df2=DataFrame(A=data[41:47,1], B=data[41:47,2], C=data[41:47,3], D=data[41:47,4], E=data[41:47,5], F=data[41:47,6], G=data[41:47,7], H=data[41:47,8], I=data[41:47,9], J=data[41:47,10], K=data[41:47,11], L=data[41:47,12], M=data[41:47,13], N=data[41:47,14], O=data[41:47,15], P=data[41:47,16], Q=data[41:47,17], R=data[41:47,18], S=data[41:47,19], T=data[41:47,20], U=data[41:47,21], V=data[41:47,22], W=data[41:47,23], X=data[41:47,24], Y=data[41:47,25], Z=data[41:47,26], AA=data[41:47,27], AB=data[41:47,28], AC=data[41:47,29], AD=data[41:47,30], AE=data[41:47,31], AF=data[41:47,32], AG=data[41:47,33], AH=data[41:47,34], AI=data[41:47,35], AJ=data[41:47,36], AK=data[41:47,37], AL=data[41:47,38], AM=data[41:47,39], AN=data[41:47,40], AO=data[41:47,41], AP=data[41:47,42], AQ=data[41:47,43], AR=data[41:47,44], AS=data[41:47,45], AT=data[41:47,46], AU=data[41:47,47])
